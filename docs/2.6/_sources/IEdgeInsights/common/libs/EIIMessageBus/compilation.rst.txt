
Compilation
-----------

The EII Message Bus utilizes CMake as the build tool for compiling the library.
The simplest sequence of commands for building the library are shown below.

.. code-block:: sh

   $ mkdir build
   $ cd build
   $ cmake ..
   $ make

This will compile only the C library for the EII Message Bus. If you wish to
build with the Python binding, then specify the ``WITH_PYTHON`` flag when
executing the ``cmake`` command (as shown below).

.. code-block:: sh

   $ cmake -DWITH_PYTHON=ON ..

If you wish to include installation of the Go binding with the installation of
the EII library, then specify the ``WITH_GO`` flag when executing the ``cmake``
command (as shown below).

.. code-block:: sh

   $ cmake -DWITH_GO=ON ..

Note that this only copies the Go binding library to your system's ``$GOPATH``.
If you do not have your ``$GOPATH`` specified in your system's environmental
variables then an error will occur while executing the ``cmake`` command.

In addition to the ``WITH_PYTHON`` and ``WITH_GO`` flags, the EII Message Bus
CMake files add flags for building the C examples and the unit tests associated
with the library. The table below specifies all of the available flags that can
be given to CMake for building the EII Message Bus.

.. list-table::
   :header-rows: 1

   * - Flag
     - Default
     - Description
   * - ``WITH_TESTS``
     - ``OFF``
     - If set to ``ON``\ , builds the C unit tests with the EII Message Bus compilation
   * - ``WITH_EXAMPLES``
     - ``OFF``
     - If set to ``ON``\ , then CMake will compile the C examples in addition to the library
   * - ``WITH_DOCS``
     - ``OFF``
     - If set to ``ON``\ , then CMake will add a ``docs`` build target to generate documentation


.. note::  These flags are in addition to any and all flags that are available
   for the ``cmake`` command. See the CMake documentation for additional flags.

   **NOTE:** See the `Generating Documentation <#generating-documentation>`__
   section.


If you wish to compile the EII Message Bus in debug mode, then you can set the
the ``CMAKE_BUILD_TYPE`` to ``Debug`` when executing the ``cmake`` command (as shown
below).

.. code-block:: sh

   $ cmake -DCMAKE_BUILD_TYPE=Debug ..

Generating Documentation
^^^^^^^^^^^^^^^^^^^^^^^^

Generating the documentation has several dependencies which are not installed
by the ``install.sh`` script. You must install the following packages in order
to generate the documentation:

.. code-block:: sh

   $ sudo apt install doxygen texlive-full

**WARNING:** This install way take a very long time. It will install > ``4GB`` of
packages.

If you are building the Python binding (by using the ``WITH_PYTHON`` flag), then
you must also install Sphinx and an extension for Sphinx. This can be
accomplished with the following commands:

.. code-block:: sh

   $ sudo apt install python3-sphinx
   $ sudo -H -E pip3 install m2r

.. note::  The commands above assume you already have Python 3.6 and pip
   installed on your system.


**Go documentation generation is WIP.**

Once you have completed these steps, the documentation can be generated by
running the following make command:

.. code-block:: sh

   $ make docs && make docs

Note that currently you need to run ``make docs`` twice so that the table of
contents is generated correctly for each of the documents. This will be fixed
in the future.

The PDF documents will be in the ``docs/pdfs/`` directory within your ``build``
directory. There will be other log files and output files associated with the
building of the PDFs. Any file that does not end in ``.pdf`` can be ignored.

Potential Compilation Issues
^^^^^^^^^^^^^^^^^^^^^^^^^^^^


* **CMake Python Version Issue:** If CMake raises an error for finding the
    incorrect Python version, then add the following flag to the CMake
    command: ``-DPYTHON_EXECUTABLE=/usr/bin/python3``
* **Python Binding Changes Not Compiling:** If a change is made to the Python
    binding and make has already been previously ran, then you must run
    ``make clean`` before running make again to compile the changes in the
    Python binding. This will need to be fixed later.
