
Running TimeSeriesProfiler
--------------------------


#. 
   Pre-requisite :

   Profiling UDF returns "ts_kapacitor_udf_entry" and "ts_kapacitor_udf_exit" timestamp.  

    These 2 as examples to refer:


   #. `profiling_udf.go <https://github.com/open-edge-insights/ts-kapacitor/blob/master/udfs/profiling_udf.go>`_
   #. `rfc_classifier.py <https://github.com/open-edge-insights/ts-kapacitor/blob/master/udfs/rfc_classifier.py>`_


* 
  **Additional:** Adding timestamps in ingestion and UDFs:

  In case user wants to enable his/her own ingestion and UDFs, timestamps need to be added to ingestion and UDFs modules respectively.
  The TS Profiler needs three timestamps.


  #. 
     "ts" timestamp which is to be filled by the ingestor (done by the mqtt-publisher app).

  #. 
     The udf to give "ts_kapacitor_udf_entry" and "ts_kapacitor_udf_exit" timestamps to profile the udf execution time.

     ts_kapacitor_udf_entry : timestamp in UDF before execution of the of the algorithm

     ts_kapacitor_udf_exit : timestamp in UDF after execution of the algorithm.

     The sample profiling UDFs can be referred at `profiling_udf.go <https://github.com/open-edge-insights/ts-kapacitor/blob/master/udfs/profiling_udf.go>`_ and `rfc_classifier.py <https://github.com/open-edge-insights/ts-kapacitor/blob/master/udfs/rfc_classifier.py>`_.

* 
  configuration required to run profiling_udf.go as profiling udf

   In **\ `Kapacitor config.json <https://github.com/open-edge-insights/ts-kapacitor/blob/master/config.json>`_\ ** , update "task" key as below:

  .. code-block::

      "task": [{
          "tick_script": "profiling_udf.tick",
          "task_name": "profiling_udf",
          "udfs": [{
             "type": "go",
             "name": "profiling_udf"
          }]
      }]

   In **\ `kapacitor.conf <https://github.com/open-edge-insights/ts-kapacitor/blob/master/config/kapacitor.conf>`_\ ** under udf section:

  .. code-block::

         [udf.functions]
            [udf.functions.profiling_udf]
              socket = "/tmp/profiling_udf"
              timeout = "20s"


  * 
    configuration required to run rfc_classifier.py as profiler udf
    In **\ `Kapacitor config.json <https://github.com/open-edge-insights/ts-kapacitor/blob/master/config.json>`_\ ** , update "task" key as below:

    .. code-block::

       "task": [{
          {
           "tick_script": "rfc_task.tick",
           "task_name": "random_forest_sample"
           }
       }]

    In **\ `kapacitor.conf <https://github.com/open-edge-insights/ts-kapacitor/blob/master/config/kapacitor.conf>`_\ ** under udf section:

    .. code-block::

       [udf.functions.rfc]
         prog = "python3.7"
         args = ["-u", "/EII/udfs/rfc_classifier.py"]
         timeout = "60s"
         [udf.functions.rfc.env]
            PYTHONPATH = "/EII/go/src/github.com/influxdata/kapacitor/udf/agent/py/"

    keep **\ `config.json <https://github.com/open-edge-insights/eii-tools/blob/master/TimeSeriesProfiler/config.json>`_\ ** file as following:

    .. code-block::

       {
       "config": {
           "total_number_of_samples": 10,
           "export_to_csv": "False"
       },
       "interfaces": {
           "Subscribers": [
               {
                   "Name": "default",
                   "Type": "zmq_tcp",
                   "EndPoint": "ia_influxdbconnector:65032",
                   "PublisherAppName": "InfluxDBConnector",
                   "Topics": [
                       "rfc_results"
                   ]
               }
           ]
       }
       }

   In `.env <https://github.com/open-edge-insights/eii-core/blob/master/build/.env>`_\ :

   Set the profiling mode as true.


#. 
   Set environment variables accordingly in `config.json <https://github.com/open-edge-insights/eii-tools/blob/master/TimeSeriesProfiler/config.json>`_

#. 
   Set the required output stream/streams and appropriate stream config in `config.json <https://github.com/open-edge-insights/eii-tools/blob/master/TimeSeriesProfiler/config.json>`_ file.

#. 
   To run this tool in IPC mode, User needs to modify subscribers interface section of **\ `config.json <https://github.com/open-edge-insights/eii-tools/blob/master/TimeSeriesProfiler/config.json>`_\ ** as following

.. code-block::

       {
           "type": "zmq_ipc",
           "EndPoint": "/EII/sockets"
       }


#. 
   Refer `README.md <https://github.com/open-edge-insights/eii-core/blob/master/README.md>`_ to provision, build and run the tool along with the EII time-series recipe/stack.

#. 
   Run the following command to see the logs:

   .. code-block:: sh

           docker logs -f ia_timeseries_profiler
