
ConfigMgr Installation
----------------------

You can install the Open EII Config Manager library in any of the following ways:


* Through published Debian, Fedora, or Alpine APK packages
* Installing from source

If you are installing from one of the packages then from the releases assets, select the package to install. Based on the OS that on which you are installing, run the following:

.. code-block:: sh

   # Debian
   sudo apt install libcjson1 libzmq5 zlib1g
   sudo dpkg -i <debian package>

   # Fedora
   sudo dnf install cjson zeromq zlib
   sudo rpm -i <rpm package>

   # Alpine (NOTE: the depencies get automatically installed by the apk command)
   sudo apk add --allow-untrusted <apk package>

In the above commands, installing the cJSON and ZeroMQ dependencies is required, however, in general, installation of the dev module is not required (i.e. the OS packages which include all of the headers for the libraries). If you are compiling an application that is linking to this library, then it is recommended that you install the ``dev`` versions of the libraries.


* For Ubuntu, install ``libcjson-dev libzmq3-dev zlib1g-dev``
* For Fedora, install ``cjson-devel zeromq-devel zlib-devel``
* For Alpine, install ``cjson-dev zeromq-dev zlib-dev``

If you want to compile the Config Manager from source, follow the
intructions below.

The ConfigMgr depends on CMake version 3.11+. For Ubuntu 18.04 this is not the default version installed via ``apt-get``. To install the correct version
of CMake and other ConfigMgr dependencies, refer to the `eii_libs_installer README <https://github.com/open-edge-insights/eii-core/blob/master/common/README.md>`_

To set ``CMAKE_INSTALL_PREFIX`` for the installation, run the following command:

.. code-block:: sh

       export CMAKE_INSTALL_PREFIX="/opt/intel/eii"

ConfigMgr installs to ``/opt/intel/eii/lib/``. On some platforms, this is not included in the ``LD_LIBRARY_PATH`` by default. As a result, you must add this directory to your ``LD_LIBRARY_PATH``\ , otherwise you will encounter issues using the ConfigMgr. This can be accomplished with the following ``export``\ :

.. code-block:: sh

   export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/opt/intel/eii/lib/

.. note::  You can also specify a different library prefix to CMake through the ``CMAKE_INSTALL_PREFIX`` flag. If different installation path is given via ``CMAKE_INSTALL_PREFIX``\ , then ``$LD_LIBRARY_PATH`` should be appended by $CMAKE_INSTALL_PREFIX/lib.


To install the remaining dependencies for the Message bus, run the following command:

.. note:: \ : It is highly recommended that you use a python virtual environment to install the python packages, so that the system python installation doesn't get altered. For details on setting up and using Python virtual environment, refer to `Python virtual environment <https://www.geeksforgeeks.org/python-virtual-environment/>>`_.


.. code-block:: sh

   sudo apt install libcjson-dev libzmq5 zlib1g-dev

.. note::  For Fedora, the packages is ``cjson-devel zeromq-devel zlib-devel``. For Alpine, the package is ``cjson-dev zeromq-dev zlib-dev``.


If you wish to compile the Python binding as well, then you must also install the Python requirements. To do this, run the following ``pip`` command:

.. code-block:: sh

   pip3 install --user -r ./python/requirements.txt

Using System gRPC
^^^^^^^^^^^^^^^^^

The ConfigMgr library can be built using the gRPC version already installed on
the system. To do this, use the ``SYSTEM_GRPC`` flag when running the ``cmake``
command. Below is an example of what this would look like:

.. code-block:: sh

    cmake -DSYSTEM_GRPC=ON ..

.. note::  The ConfigMgr library depends on a specific gRPC version, 1.29.0. A debian package is provided for this in the grpc-package directory. To install
   this in Ubuntu run the following command:


.. code-block:: sh

   sudo dpkg -i grpc-package/grpc-1.29.0-Linux.deb
