## Using input/output plugin with RFC udf
  * Add the RFC task to [config.json](config.json):
    ```
        "task": [
           {
             "tick_script": "rfc_task.tick",
             "task_name": "random_forest_sample",
             "udfs": [{
                 "type": "python",
                 "name": "rfc_classifier"
             }]
           }
        ]
    ```
  * Modify the [rfc_task.tick](tick_scripts/rfc_task.tick) as below, for example:
    ```
    dbrp "eii"."autogen"

    var data0 = stream
            |from()
                    .database('eii')
                    .retentionPolicy('autogen')
                    .measurement('ts_data')
            |window()
            .period(3s)
            .every(4s)

    data0
            @rfc()
            |eiiOut()
                    .pubname('sample_publisher')
                    .topic('sample_topic')
    ```
  * Add a publisher interface added to [config.json](config.json) with the same publisher name and topic 
    i.e. 'sample_publisher' and 'sample_topic' respectively as in the above example.
    For example:


    **TCP mode**
    ```
        "Publishers": [
            {
                "Name": "sample_publisher",
                "Type": "zmq_tcp",
                "EndPoint": "0.0.0.0:65034",
                "Topics": [
                    "sample_topic"
                ],
                "AllowedClients": [
                    "TimeSeriesProfiler",
                    "EmbSubscriber",
                    "GoSubscriber"
                ]
            }
        ]

    ```

    **IPC mode**
    ```
        "Publishers": [
            {
                "Name": "sample_publisher",
                "Type": "zmq_ipc",
                "EndPoint": "/EII/sockets",
                "Topics": [
                    "sample_topic"
                ],
                "AllowedClients": [
                    "TimeSeriesProfiler",
                    "EmbSubscriber",
                    "GoSubscriber"
                ]
            }
        ]

    ```

  * Do the [provisioning](../README.md#provision) and run the EII stack.
