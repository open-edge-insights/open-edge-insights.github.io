
Bare Metal
----------

**IMPORTANT NOTE:**

Running the broker using bare-metal is not recommended for production environments.
This way of running the broker is meant purely for development and debugging
purposes.

Compilation
^^^^^^^^^^^

The ZeroMQ Broker is written in C++ and as such utilizes the CMake build
system for building the binary for the broker.

The ZeroMQ Broker has the following dependencies:


* CMake 3.15+
* IntelSafeString
* EIIUtils
* libzmq
* EIIConfigMgr
* EIIMessageBus (only required for unit tests)

Prior to building the ZeroMQ Broker, you must install these libraries on
the target system. This can be done using the, "common/eii_libs_installer.sh"
script.

Once the dependencies for the broker are installed on your system, run the
following commands to build the ZeroMQ Broker.

.. code-block:: sh

   # 1. Create the build directory
   $ mkdir build/

   # 2. Change directories into the newly created build/ directory
   $ cd build/

   # 3. Run the CMake command to setup the build environment (see subsections)

   # 3a. If you want to compile without the unit tests execute the following command
   $ cmake ..

   # 3b. If you wish to compile the unit tests, then execute the following (note:
   # it is recommended to build in Debug mode)
   $ cmake -DCMAKE_BUILD_TYPE=Debug -DWITH_TESTS=ON ..

   # 4. Build the ZeroMQ Broker binary
   $ make

Usage
^^^^^

After building the ZeroMQ Broker you will have a binary named, "zmq-broker".
Use this binary to run the ZeroMQ Broker.

The ZeroMQ Broker can be configured from the EII Configuration Manager as
well as from environmental variables and JSON configuration files.

To use the configuration obtained via the EII Configuration Manager, simply
start the binary with no parameters; however, make sure to set the ``AppName``
and ``DEV_MODE`` environmental variables. As mentioned at the beginning of the,
"Bare Metal", section, this way of running the broker should only be done in
development environments. As such, it is assumed that the ``DEV_MODE`` environmental
variable will be set to ``true`` and no security shall be used with the Configuration
Manager or over EII Message Bus ZeroMQ TCP connections. Additionall, for running
in this way, the, "ia_etcd", container must be running.

.. code-block:: sh

   # Set DEV_MODE environmental variable to "true"
   $ export DEV_MODE=true

   # Set the AppName environmental variable to "ZmqBroker"
   $ export AppName=ZmqBroker

   # Run the broker
   $ ./zmq-broker

The broker also supports receiving its configuration through JSON configuration
files and environmental variables. To set the log level, Linux scheduler policy
and priority set the following environmental variables (defined in Configuration
section of this README).


* ``C_LOG_LEVEL`` - Log level (will default to ``ERROR`` log level)
* ``SCHED_POLCIY`` - Scheduler policy
* ``SCHED_PRIORITY`` - Scheduler priority

Note that none of the above environmental variables are required to run the
broker.

When using JSON files, the broker will expect two positional command line
arguments. The first will be the configuration of the **frontend** socket and
the second will be for the **backend** configuration.

..

   **REMINDER:** The **frontend** refers to the configuration for socket which
   publishers shall connect to, and the **backend** refers to the configuration
   for the socket which subscribers shall connect to.


The contents of the JSON is analygous to the JSON configuration files used in
the EII Message Bus (see the IEdgeInsights/common/libs/EIIMessageBus/README.md
for more information). The contents of the JSON files depends on whether if
the given socket is supposed to use TCP or IPC.

For **IPC** configurations, the frontend and backend configurations need to look
respectively as follows:

**Frontend:**

.. code-block:: javascript

   {
       // Which ZeroMQ protocol to use (TCP vs. IPC)
       "type": "zmq_ipc",

       // Socket directory to create the socket file in
       "socket_dir": "/tmp",

       // Specifies the IPC endpoint config (i.e. socket directory and file)
       "": {
           // IPC socket file to bind to for the frontend socket
           "socket_file": "frontend-sock"
       }
   }

..

   *\ *NOTE:* This example configuration is stored in, "examples/ipc_frontend_example.json",
   and can be used with the, "examples/configs/ipc_publisher_brokered.json",
   EII Message Bus configuration file.


The table below desribes the purpose of each key in the JSON configuration file.

.. list-table::
   :header-rows: 1

   * - Key
     - Description
   * - ``type``
     - Specifies the ZeroMQ protocol to use, must be either ``zmq_ipc`` or ``zmq_tcp``.
   * - ``socket_dir``
     - Specifies the directory in which to create all of the IPC socket files.
   * - ``""``
     - Gives the IPC socket file configuration for the frontend IPC socket.
   * - ``socket_file``
     - This key specifies the name of the socket file to bind to.


For the ``socket_file`` key, when connecting a publisher, the publisher's
configuration must also use this same ``socket_file`` key in the configuration
for it. Otherwise, it will fail to connect because it will attempt to
bind/connect to its topic name (see the EII Message Bus's documentation for
more details).

**Backend:**

.. code-block:: javascript

   {
       // Which ZeroMQ protocol to use (TCP vs. IPC)
       "type": "zmq_ipc",

       // Socket directory to create the socket file in
       "socket_dir": "/tmp",

       // Specifies the IPC endpoint config (i.e. socket directory and file)
       "": {
           // IPC socket file to bind to for the backend socket
           "socket_file": "backend-sock"
       }
   }

..

   *\ *NOTE:* This example configuration is stored in, "examples/ipc_backend_example.json",
   and can be used with the, "examples/configs/ipc_subscriber_brokered.json",
   EII Message Bus configuration file.


The configuration for the backend socket is the exact same as for the frontend.

For **TCP** configurations, the frontend anc backend configurations need to look
respectively as follows:

**Frontend:**

.. code-block:: javascript

   {
       // Which ZeroMQ protocol to use (TCP vs. IPC)
       "type": "zmq_tcp",

       // List of curve public keys for publishers allowed to connect to the
       // frontend socket
       "allowed_clients": ["4J4?(I13cwJgqi+T5nxg:Dyr5)l&reK]cxxTfa9V"],

       // Specifies the configuration for the frontend socket
       "": {
           // TCP host
           "host": "0.0.0.0",

           // TCP port
           "port": 5568,

           // Server secret key to use for encryption / authentication
           "server_secret_key": "H[J1%f:#?0Y1cpUL<nEkPKm.]:n@JI>j]*!u3N#9"
       }
   }

.. note::  This example configuration is stored in, "examples/tcp_frontend_example.json",
   and can be used with the, "examples/configs/tcp_publisher_brokered_with_security.json",
   EII Message Bus configuration file.


The table below desribes the purpose of each key in the JSON configuration file.

.. list-table::
   :header-rows: 1

   * - Key
     - Description
   * - ``type``
     - Specifies the ZeroMQ protocol to use, must be either ``zmq_ipc`` or ``zmq_tcp``.
   * - ``host``
     - TCP host.
   * - ``port``
     - TCP port.
   * - ``allowed_clients``
     - Specifies the list of public keys for the publishers which are allowed to connect.
   * - ``""``
     - Gives security configuration for the frontend TCP socket.
   * - ``server_secret_key``
     - Secret key for the frontend socket for encryption / authentication.


**IMPORTANT NOTE**

When using JSON files for the configuration of the ZeroMQ Broker, the JSON
file is the configuration used by the EII Message Bus, rather than the normal
EII interface configurations. This is why the JSON configuration differs
from the configuration given via the ``eii_config.json``. The JSON shown above
for the frontend, and the following backend configuration, represent how the
configuration manager alters that configuration to be in these forms.

**Backend:**

.. code-block:: javascript

   {
       // Which ZeroMQ protocol to use (TCP vs. IPC)
       "type": "zmq_tcp",

       // List of curve public keys for subscribers allowed to connect to the
       // backend socket
       "allowed_clients": ["y-G]27SC}{!mC4(]}=c=KH1M{x)Kd/{i%o]j7YT3"],

       // Specifies the configuration for the frontend socket
       "zmq_tcp_publish": {
           // TCP host
           "host": "0.0.0.0",

           // TCP port (note that this is a different port from the frontend)
           "port": 5569

           // Server secret key to use for encryption / authentication
           "server_secret_key": "qydUsM#PP4r<E*2]<]kbLRwk1IX:H^y{Gk56e:tc"
       }
   }

..

   *\ *NOTE:* This example configuration is stored in, "examples/tcp_backend_example.json",
   and can be used with the, "examples/configs/tcp_subscriber_with_security.json",
   EII Message Bus configuration file.


All of the keys above have the same purpose and meaning as for the frontend
configuration. Except, there is one key difference; instead of the empty string
key, the backend configuration has the ``zmq_tcp_publish`` key. This is because
the broker adopts the same configuration definitions as the EII Message Bus
ZeroMQ protocol plugin. The ZeroMQ protocol plugin uses the ``zmq_tcp_publish``
key for setting the TCP (host, port) combinations for all publishers under a
single message bus context. The broker uses the same configuration to keep it
consistent between the two entities.

Once the frontend and backend JSON configuration files have been created,
run the broker binary as follows:

.. code-block:: sh

   # IPC Example
   $ ./zmq-broker examples/ipc_frontend_example.json examples/ipc_backend_example.json

   # TCP Example
   $ ./zmq-broker examples/tcp_frontend_example.json examples/tcp_backend_example.json

.. note::  It is assumed the configurations are named, "frontend_config.json",
   and, "backend_config.json", respectively. These could be named anything the
   user wishes. For more examples of configurations, see the JSON files in the,
   "tests/configs/", directory.


Running Unit Tests
^^^^^^^^^^^^^^^^^^

If the ZeroMQ Broker was built with the ``-DWITH_TESTS=ON`` flag set for the
CMake command, then do the following to run the unit tests:

.. note::  The commands below assume you are in the, "build/", directory created
   when compiing the broker.


.. code-block:: sh

   # 1. Change directories into the tests/ directory
   $ cd tests/

   # 2. Execute the unit tests
   $ ./broker-tests

If you wish to run the unit tests with a different log level, then provide
one of the following log levels: ``DEBUG``\ , ``INFO``\ , ``WARN``\ , ``ERROR`` with the
command line argument ``--log-level``. An example of using the ``DEBUG`` log
level is shown below:

.. code-block:: sh

   $ ./broker-tests --log-level DEBUG
