.. role:: raw-html-m2r(raw)
   :format: html


**Contents**


* `Contributing to IEdgeInsights <http://localhost:7645/IEdgeInsights/#contributing-to-iedgeinsights>`_

  * `Merge Requests <http://localhost:7645/IEdgeInsights/#merge-requests>`_

    * `Commit and MR Hygiene <http://localhost:7645/IEdgeInsights/#commit-and-mr-hygiene>`_
    * `Minimum requirements for a MR <http://localhost:7645/IEdgeInsights/#minimum-requirements-for-a-mr>`_
    * `Review Process <http://localhost:7645/IEdgeInsights/#review-process>`_

Contributing to IEdgeInsights
=============================

Merge Requests
--------------

Everybody can propose a merge request (MR) but only the
core-maintainers of the project can merge it.

Commit and MR Hygiene
^^^^^^^^^^^^^^^^^^^^^

The following points will be especially looked at during the review.


#. 
   **master** is the default branch, it is advised always to work on a new
   feature/bug fix developer branch by keeping your local **master** branch
   untouched. The below convention while naming our branches can be followed:


   * Feature branches - feature/idsid/feature_name
   * Bugfix branch - bugfix/idsid/jira_bug_ids

   More details on best git branching model
   `https://nvie.com/posts/a-successful-git-branching-model/ <https://nvie.com/posts/a-successful-git-branching-model/>`_

#. 
   Once your branch is created by following the above convention
   (\ ``git checkout -b <branch_name>``\ ) and it's ready with the changes,
   run the below commands:


   * 
     ``git commit -s`` - commit the message just like the old fashioned
     way with one liner and the body. Commit message
     format below:

     .. code-block:: sh

         <module_name>: one liner about the commit

         Additional details about the commit message

         Signed-off by: abc <abc@intel.com>

     Here, ``module_name`` loosely refers to the folder name where the major
     change is been introduced.

   * 
     ``git push origin <branch_name>`` - pushes your changes to the remote
     branch name (orgin/\ :raw-html-m2r:`<branch_name>`\ )

   * Create a merge request in gitlab
   * If one notices any conflicts after creating a pull request, just
     apply the latest master to your :raw-html-m2r:`<branch_name>` by running commands:

     * ``git checkout master`` - with your current branch being :raw-html-m2r:`<branch_name>`
     * ``git pull`` - pull latest remote master commits to your local master
       branch
     * ``git checkout <branch_name>`` - Get back to your branch
     * ``git rebase master`` - rebase your branch with latest master

#. 
   After addressing code review comments, do a ``git commit --amend`` to amend
   the commit message and do a ``git push -f origin <branch_name>`` to forcely
   push your changes. This is needed as we want to maintain a single commit.

Minimum requirements for a MR
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

The following are the minimal requirements that every MR should meet.


* **Pass Continuous Integration (pre-merge build)**\ : Every MR has to pass
  our CI. Below are the scripts in `CITests repo <https://gitlab.devtools.intel.com/Indu/IEdgeInsights/CITests?nav_source=navbar>`_ that would be invoked
  by the pre-merge build:

  #. ``pre_recieve_hook.sh`` - does linting for changed go and python files
      w.r.t latest master
  #. ``pre_merge_and_nightly_build_script.sh`` - builds and runs the pre-merge
      build
  #. We are in the process of adding the ``pre-merge`` testsuite to perform
     santiy testing

Review Process
^^^^^^^^^^^^^^

The reviewers may be busy. If they take especially long to react, feel free to
trigger them by additional comments in the MR thread.

It is the job of the developer that posts the MR to rebase the MR on the target
branch when the two diverge.

Below are some additional stuff that developers should adhere to:


* 
  Please batch all your comments by adding to ``review`` by clicking on ``Start a
  review`` to start and add all further comments by clicking on ``Add to review``.
  Once done adding all the review comments, click on ``Finish review`` and
  subsequently on ``Submit review`` buttons to submit all of your review comments.
  This way all the reviewers involved will get notified only once through an email
  notification.

* 
  In a merge request (i.e., on a feature/bugfix branch) one can have as many
  commits as possible. If all the commits are related to a single feature (eg:
  one has addressed review comments or fixed something etc.,), just ensure the
  ``Title`` and ``Description`` of the merge-request is up-to-date with respect to
  what is been added/modified/removed etc., This way, the maintainer
  during merging your merge request will squash all your commits into one and
  modify the squashed commit message to have both the ``Title`` and ``Description``
  of the merge request.

  If merge-request has a single commit, then automatically it gets picked up in
  your merge-request description.

  If one wants to just keep ammending the single commit, he/she can do so as
  well as gitlab allows to compare the force pushed changes with the previous
  version which will be very helpful for reviewers.

* 
  Whenever one sees any failure in the pre-merge build, just check if “rebasing”
  your merge-request branch with latest master and re-push can fix the issue.
  If not, please apply access to CI environment(check `CITests repo README.md <https://gitlab.devtools.intel.com/Indu/IEdgeInsights/CITests/blob/master/README.md>`_\ )
  to see the reason behind failure.
