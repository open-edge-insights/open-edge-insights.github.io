## Running Video Profiler

1. Set environment variables accordingly in [config.json](config.json).

2. Set the required output stream/streams and appropriate stream config in [config.json](config.json) file.

3. If VideoProfiler is subscribing to multiple streams, ensure the **AppName** of VideoProfiler is added in the Clients list of all the publishers.

4. If using Video Profiler in IPC mode, make sure to set required permissions to socket file created in SOCKET_DIR in [build/.env](../../build/.env).

    ```sh
        sudo chmod -R 777 /opt/intel/eii/sockets
    ```
    **Note:**

    *  This step is required everytime publisher is restarted in IPC mode.

       Caution: This step will make the streams insecure. Please do not do it on a production machine.

    * Refer the below VideoProfiler interface example to subscribe to PyMultiClassificationIngestion CutomUDF results in fps mode.

      ```javascript
        "/VideoProfiler/interfaces": {
            "Subscribers": [
                {
                    "EndPoint": "/opt/intel/eii/sockets",
                    "Name": "default",
                    "PublisherAppName": "PyMultiClassificationIngestion",
                    "Topics": [
                        "py_multi_calssification_results_stream"
                    ],
                    "Type": "zmq_ipc"
                }
            ]
        },
      ```

5. Refer [provision/README.md](../../README.md) to provision, build and run the tool along with the EII video-streaming recipe/stack.

6. Run the following command to see the logs:

    ```sh
        docker logs -f ia_video_profiler
    ```

7. The runtime stats of Video Profiler if enabled with export_to_csv switch can be found at [video_profiler_runtime_stats](video_profiler_runtime_stats.csv)

  > **Note:**
  > * `poll_interval` option in the VideoIngestion [config](../../VideoIngestion/config.json) sets the delay(in seconds)
      to be induced after every consecutive frame is read by the opencv ingestor.
      Not setting it will ingest frames without any delay.
  > * `videorate` element in the VideoIngestion [config](../../VideoIngestion/config.json) can be used to modify the
      ingestion rate for gstreamer ingestor.
      More info available at [README](../../VideoIngestion/README.md).
  > * `ZMQ_RECV_HWM` option shall set the high water mark for inbound messages on the subscriber socket.
      The high water is a hard limit on the maximum number of outstanding messages ZeroMQ shall queue in memory for
      any single peer that the specified socket is communicating with.
      If this limit has been reached, the socket shall enter an exeptional state and drop incoming messages.
  > * In case of running Video Profiler for GVA use case we do not display the stats of the algo running with GVA since no
      UDFs are used.
  > * The rate at which the UDFs process the frames can be measured using the FPS UDF and ingestion rate can be monitored accordingly.
      In case multiple UDFs are used, the FPS UDF is required to be added as the last UDF.
  > * In case running this tool with VI & VA in two different nodes, same time needs to be set in both the nodes.

