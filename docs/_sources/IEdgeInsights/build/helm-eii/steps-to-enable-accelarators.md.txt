## Steps to enable Accelarators
>**Note**:
> `nodeSelector` is the simplest recommended form of node selection constraint.
> `nodeSelector` is a field of PodSpec. It specifies a map of key-value pairs. For the pod to be eligible to run on a node, the node must have each of the indicated key-value pairs as labels (it can have additional labels as well). The most common usage is one key-value pair.

1. Setting the `label` for a particular node
  ```sh
  $ kubectl label nodes <node-name> <label-key>=<label-value>
  ```

2. For HDDL/NCS2 dependenecies follow the steps for setting `labels`.

  * For HDDL

  ```sh
  $ kubectl label nodes <node-name> hddl=true
  ```

  * For NCS2

  ```sh
  kubectl label nodes <node-name> ncs2=true
  ```

>**Note**: Here the node-name is your worker node machine hostname

3. Open the `[WORKDIR]/IEdgeInsights/VideoIngestion/helm/values.yaml` or `[WORKDIR]/IEdgeInsights/VideoAnalytics/helm/values.yaml` file.

4. Based on your workload preference. Add hddl or ncs2 to accelerator in values.yaml of video-ingestion or video-analytics. 

  * For HDDL

  ```yml
  config:
    video_ingestion:
       .
       .
       .
      accelerator: "hddl"
      .
      .
      .
  ```
  * For NCS2

  ```yml
  config:
    video_ingestion:
       .
       .
       .
      accelerator: "ncs2"
      .
      .
      .
  ```

5. set device as "MYRIAD" in case of ncs2 and as HDDL in case of hddl in the [VA config](../../VideoAnalytics/config.json)
  
  * In case of ncs2.

  ```yml
  "udfs": [{
    .
    .
    .
    "device": "MYRIAD"
    }]
  ```

  * In case of hddl.

  ```yml
  "udfs": [{
    .
    .
    .
    "device": "HDDL"
    }]
  ```  

6. Run the `[WORKDIR]/IEdgeInsights/build/builder.py` for generating latest consolidated `deploy` yml file based on your `nodeSelector` changes set in the respective Modules.

  ```sh
  cd [WORKDIR]/IEdgeInsights/build/
  python3 builder.py
  ```

7. Follow the [Deployment Steps](##Provision-and-deploy-in-the-kubernetes-node)

8. Verify the respecitve workloads are running based on the `nodeSelector` constraints.

