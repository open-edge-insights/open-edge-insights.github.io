## Enabling EII message bus input plugin in Telegraf

**Purpose**
Receiving the data from EII message bus and storing it into influx db, at scale.

**Overview**

The plugin subscribes to configured topic / topic prefixes. Plugin has component
called subscriber which receives the data from eii message bus.
After receiving the data, depending on configuration, the plugin process
the data, either synchronously or asynchronously. 
- In synchronous processing, the receiver thread (thread which receives the data from EII message bus) is also resposible for the processing of the data (json parsing). After processing the previous data only, the receiver thread process next data available on the EII message bus. 
- In asynchronous processing the  receiver thread  receives the data and put it into the queue. There will be pool of threads which will be dequeing the data from the queue and processing it.

**Guidelines for choosing the data processing options are**
- Synchronous option: When the ingestion rate is consistent
- Asynchronous options: There are two options
1.  Topic specific queue+threadpool : Frequent spike in ingestion rate for a specific topic
2.  Global queue+threadpool : Sometimes spike in ingestion rate for a specific topic

**Configuration of the plugin**
Configuration of the plugin is divided into two parts
1. ETCD configuration
2. Configuration in Telegraf.conf file [config/Telegraf/Telegraf.conf](./config/Telegraf/Telegraf.conf)

**ETCD configuration**
Since this is eii message bus plugin and so it's part of EII framework,
message bus configuration and plugin's topic specific configuration is kept into etcd.
Below is the sample configuration

```json
{
    "config": {
        "influxdb": {
            "username": "admin",
            "password": "admin123",
            "dbname": "datain"
        },
        "default": {
            "topics_info": [
                "topic-pfx1:temperature:10:2",
                "topic-pfx2:pressure::",
                "topic-pfx3:humidity"
            ],
            "queue_len": 10,
            "num_worker": 2,
            "profiling": "false"
        }
    },
    "interfaces": {
        "Subscribers": [
            {
                "Name": "default",
				"Type": "zmq_tcp",
                "EndPoint": "ia_zmq_broker:60515",
                "Topics": [
                    "*"
                ],
                "PublisherAppName": "ZmqBroker"
            }
        ]
    }
}
```
**Brief description of the configuration**.
Like any other EII service Telegraf has 'config' and 'interfaces'  sections.  "interfaces" are the eii interface details. Let's have more information of "config" section.

config :  Contains the configuration of the influxdb (**"influxdb"**) and  eii messagebus input plugin (**"default"**). In the above sample configuration, the **"default"** is an instance name. This instance name is referenced from the Telegraf's configuration file [config/Telegraf/Telegraf.conf](./config/Telegraf/Telegraf.conf)

- topics_info : This is an array of topic prefix configuration, where user specifies, how the data from topic-prefix should be processed. Below is the  way every line in the topic information should be interpreted.
	1. "topic-pfx1:temperature:10:2" : Process data from topic prefix 'topic-pfx1' asynchronously using the dedicated queue of length 10 and dedicated thread pool of size 2. And the processed data will be stored at measurement named 'temperature' in influxdb.
	2. "topic-pfx2:pressure::" : Process data from topic prefix 'topic-pfx2' asynchronously using the global queue and global thread pool. And the processed data will be stored at measurement named 'pressure' in influxdb.
	3. "topic-pfx3:humidity" : Process data synchronously. And the processed data will be stored at measurement named 'humidity' in influxdb.

    *Note : In case, topic specific configuration is not mentioned, then by default, data  gets processed synchronously and measurement name would be, same as topic name.*

- queue_len : Global queue length.
- num_worker : Global thread pool size.
- profiling : This is to enable profiling mode of this plugin (value can be either "true" or "false"). In profiling mode every point will get the following information and will be kept into same measurement as that of point.

	1. Total time spent in plugin (time in ns)
	2. Time spent in queue (in case of asynchronous processing only and time in ns)
	3. Time spend in json processing (time in ns)
	4. The name of the thread pool and the thread id which processed the point.

	*Note: The name of the global thread pool is "GLOBAL". For a topic specific thread pool, the name is "for-$topic-name".*
                                                                                                                                  |

**Configuration at Telegraf.conf file**

The plugin instance name is an additional key, kept into plugin configuration section. This key is used to fetch the configuration from ETCD. Below is the minimmum, sample configuration with single plugin instance.

    [[inputs.eii_msgbus]]
    **instance_name = "default"**
    data_format = "json"
    json_strict = true

Here, the value **'default'**  acts as a key in the file **[config.json](./config.json)**. For this key, there is configuration in the **'interfaces' and 'config'** sections of the file **[config.json](./config.json)**. So the value of** 'instance_name'** acts as a connect/glue between the Telegraf configuration **[config/Telegraf/Telegraf.conf](./config/Telegraf/Telegraf.conf)** and the **ETCD configuration [config.json](./config.json)**

*Note: 
Since it’s telegraf input plugin, the telegraf’s parser configuration
has to be in Telegraf.conf file. The more information of the telegraf json parser plugin can be be found at https://github.com/influxdata/telegraf/tree/master/plugins/parsers/json.*
In case if there are multiple telegraf instances, then the location of the Telegraf configuration files would be different. For more details please refer the section [Optional: Adding multiple telegraf instance](#Optional: Adding multiple telegraf instance)

