
Using builder script
--------------------

Builder script usage:

.. code-block:: sh

   $ python3 builder.py -h
   usage: builder.py [-h] [-f YML_FILE] [-v VIDEO_PIPELINE_INSTANCES]
                       [-d OVERRIDE_DIRECTORY]

   optional arguments:
       -h, --help            show this help message and exit
       -f YML_FILE, --yml_file YML_FILE
                           Optional config file for list of services to include.
                           Eg: python3 builder.py -f video-streaming.yml
                           (default: None)
       -v VIDEO_PIPELINE_INSTANCES, --video_pipeline_instances VIDEO_PIPELINE_INSTANCES
                           Optional number of video pipeline instances to be
                           created. Eg: python3 builder.py -v 6 (default:
                           1)
       -d OVERRIDE_DIRECTORY, --override_directory OVERRIDE_DIRECTORY
                           Optional directory consisting of of benchmarking
                           configs to be present in each app directory. Eg:
                           python3 builder.py -d benchmarking (default:
                           None)

Running builder to generate the above listed consolidated files for all applicable EII services
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

  Builder will parse the top level directories under **IEdgeInsights** to generate the above listed consolidated files.

.. code-block:: sh

     $ python3 builder.py

Running builder to generate the above listed consolidated files for a subset of EII services:
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

  This is achieved by providing a yml file to Builder as config which has list of services to include. User can mention the service name as path relative to **IEdgeInsights** or Full path to the service in the config yml file.

  If user wants to include only a certain number of services in the EII stack, he can opt to provide the **-f or yml_file** flag of builder.py to allow only the services provided in the yml file mentioned with the **-f or yml_file**. Few examples of such yml files for different usecases are provided at `Azure <https://github.com/open-edge-insights/eii-core/blob/master/build/usecases/video-streaming-azure.yml>`_\ , `Azure <https://github.com/open-edge-insights/eii-core/blob/master/build/usecases/video-streaming-azure.yml>`_\ , `Azure <https://github.com/open-edge-insights/eii-core/blob/master/build/usecases/video-streaming-azure.yml>`_ etc.,

  An example for running Builder with this flag is given below:

.. code-block:: sh

     $ python3 builder.py -f usecases/video-streaming.yml

----

**NOTE**\ :


* **Main usecases**\ :
  | Usecase                    | yaml file                                                |
  | :---                       | :---                                                    |
  | Video + Timeseries         | `build/usecases/video-timeseries.yml <https://github.com/open-edge-insights/eii-core/blob/master/build/usecases/video-timeseries.yml>`_ |
  | Video                      | `build/usecases/video.yml <https://github.com/open-edge-insights/eii-core/blob/master/build/usecases/video.yml>`_                       |
  | Timeseries                 | `build/usecases/time-series.yml <https://github.com/open-edge-insights/eii-core/blob/master/build/usecases/time-series.yml>`_           |
* 
  **Video pipeline sub-usecases**\ :

  | Usecase                                | yaml file                                                               |
  | :---                                   | :---                                                                    |
  | Video streaming                        | `build/usecases/video-streaming.yml <https://github.com/open-edge-insights/eii-core/blob/master/build/usecases/video-streaming.yml>`_                  |
  | Video streaming and historical         | `build/usecases/video-streaming-storage.yml <https://github.com/open-edge-insights/eii-core/blob/master/build/usecases/video-streaming-storage.yml>`_  |
  | Video streaming with AzureBridge       | `build/usecases/video-streaming-azure.yml <https://github.com/open-edge-insights/eii-core/blob/master/build/usecases/video-streaming-azure.yml>`_      |
  | Video streaming and custom udfs        | `build/usecases/video-streaming-all-udfs.yml <https://github.com/open-edge-insights/eii-core/blob/master/build/usecases/video-streaming-all-udfs.yml>`_\ |

----

Running builder to generate multi instance configs:
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

  Based on the user's requirements, builder can also generate multi-instance docker-compose.yml, config.json respectively.

  If user wants to generate boiler plate config for multiple stream use cases, he can do so by using the **-v or video_pipeline_instances** flag of builder. This flag creates multi stream boiler plate config for docker-compose.yml, eii_config.json files respectively.

  An example for running builder to generate multi instance boiler plate config for 3 streams of **video-streaming** use case has been provided below:

.. code-block:: sh

     $ python3 builder.py -v 3 -f usecases/video-streaming.yml

.. note:: 
   This multi-instance feature support of Builder works only for the video pipeline i.e., **usecases/video-streaming.yml** use case alone and not with any other use case yml files like **usecases/video-streaming-storage.yml** etc., Also, it doesn't work for cases without ``-f`` switch too. In other words, only the above example works with ``-v`` taking in any +ve number


Running builder to generate benchmarking configs:
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

  If user wants to provide a different set of docker-compose.yml, config.json other than the ones present in every service directory, he can opt to provide the **-d or override_directory** flag which indicates to search for these required set of files within a directory provided by the flag. For example, if user wants to pick up these files from a directory named **benchmarking**\ , he can run the command provided below:

.. code-block:: sh

     $ python3 builder.py -d benchmarking

.. note:: 


   * If using the override directory feature of builder, it is recommended to include set of all 3 files mentioned above. Failing to provide any of the files in the override directory results in builder not including that service in the generated final config.
   * If user wishes to spawn a single Subscriber/Client container subscribing/receiving on multiple Publisher/Server containers, he can do so by adding the AppName of Subscriber/Client container in **subscriber_list** of `builder_config.json <https://github.com/open-edge-insights/eii-core/blob/master/build/builder_config.json>`_ ensuring the Publisher/Server container **AppName** is added in the **publisher_list** of `builder_config.json <https://github.com/open-edge-insights/eii-core/blob/master/build/builder_config.json>`_. For services not mentioned in **subscriber_list**\ , multiple containers specified by the **-v** flag are spawned.
     For eg: If builder is run with **-v 3** option and **Visualizer** isn't added in **subscriber_list** of `builder_config.json <https://github.com/open-edge-insights/eii-core/blob/master/build/builder_config.json>`_\ , 3 **Visualizer** instances are spawned, each of them subscribing to 3 **VideoAnalytics** services. If **Visualizer** is added in **subscriber_list** of `builder_config.json <https://github.com/open-edge-insights/eii-core/blob/master/build/builder_config.json>`_\ , a single **Visualizer** instance subscribing to 3 multiple **VideoAnalytics** is spawned.

