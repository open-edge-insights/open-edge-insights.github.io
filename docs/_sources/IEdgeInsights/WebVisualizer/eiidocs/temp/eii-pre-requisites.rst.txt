
EII Pre-Requisites
------------------

The section assumes the EII software is already downloaded from the release package or from git.

Generating consolidated docker-compose.yml, eii_config.json and eii-k8s-deploy.yml files:
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

EII is equipped with `builder <https://verbose-umbrella-1e93cbeb.pages.github.io/IEdgeInsights/builder.py>`_\ , a robust python tool to auto-generate the required configuration files to deploy EII services on single/multiple nodes. The tool is    capable of auto-generating the following consolidated files by fetching the respective files from EII service directories which are required to bring up different EII use-cases:

.. list-table::
   :header-rows: 1

   * - file name
     - Description
   * - docker-compose.yml
     - Consolidated ``docker-compose.yml`` file used to launch EII docker containers in a given single node using ``docker-compose`` tool
   * - docker-compose.override.yml
     - Consolidated ``docker-compose-dev.override.yml`` of every app that is generated only in DEV mode for EII deployment on a given single node using ``docker-compose`` tool
   * - eii_config.json
     - Consolidated ``config.json`` of every app which will be put into etcd during provisioning
   * - eii-k8s-deploy.yml
     - Consolidated ``k8s-service.yml`` of every app that is required to deploy EII servcie via Kubernetes orchestrator


.. note:: \ :


   #. Whenever we make changes to individual EII app/service directories files as mentioned above in the description column, 
        it is required to re-run the builder.py script before provisioning and running the EII stack to ensure that the 
        changes done reflect in the required consolidated files.
   #. Manual editing of above consolidated files is not recommended and we would recommend to do the required changes to 
        respective files in EII app/service directories and use Builder script to generate the conslidated ones.


Using Builder script
~~~~~~~~~~~~~~~~~~~~

* Install requirements
""""""""""""""""""""""

.. code-block:: sh

   $ cd [WORKDIR]/IEdgeInsights/build
   ## Install requirements for builder.py
   $ pip3 install -r requirements.txt

* Running Builder
"""""""""""""""""

Builder script usage:

.. code-block:: sh

   $ python3.6 builder.py -h
   usage: builder.py [-h] [-f YML_FILE] [-v VIDEO_PIPELINE_INSTANCES]
                       [-d OVERRIDE_DIRECTORY]

   optional arguments:
       -h, --help            show this help message and exit
       -f YML_FILE, --yml_file YML_FILE
                           Optional config file for list of services to include.
                           Eg: python3.6 builder.py -f video-streaming.yml
                           (default: None)
       -v VIDEO_PIPELINE_INSTANCES, --video_pipeline_instances VIDEO_PIPELINE_INSTANCES
                           Optional number of video pipeline instances to be
                           created. Eg: python3.6 builder.py -v 6 (default:
                           1)
       -d OVERRIDE_DIRECTORY, --override_directory OVERRIDE_DIRECTORY
                           Optional directory consisting of of benchmarking
                           configs to be present in each app directory. Eg:
                           python3.6 builder.py -d benchmarking (default:
                           None)


* 
  ``Running builder to generate the above listed consolidated files for all applicable EII services``\ :

   Builder will parse the top level directories under **IEdgeInsights** to generate the above listed consolidated files.

  .. code-block:: sh

      $ python3 builder.py

* 
  ``Running builder to generate the above listed consolidated files for a subset of EII services``\ :

   This is achieved by providing a yml file to Builder as config which has list of services to include. User can mention the service name as path relative to **IEdgeInsights** or Full path to the service in the config yml file.

  If user wants to include only a certain number of services in the EII stack, he can opt to provide the **-f or yml_file** flag of builder to allow only the services provided in the yml file mentioned with the **-f or yml_file**. Few examples of such yml files for different usecases are provided at `video <https://verbose-umbrella-1e93cbeb.pages.github.io/IEdgeInsights/video-streaming-azure.yml>`_\ , `time-series <https://verbose-umbrella-1e93cbeb.pages.github.io/IEdgeInsights/video-streaming-azure.yml>`_\ , `Azure <https://verbose-umbrella-1e93cbeb.pages.github.io/IEdgeInsights/video-streaming-azure.yml>`_ etc.,

  An example for running Builder with this flag is given below:

  .. code-block:: sh

     $ python3 builder.py -f video-streaming.yml

* 
  ``Running builder to generate multi instance configs``\ :

  Based on the user's requirements, builder can also generate multi-instance docker-compose.yml, config.json, k8s-service.yml respectively.

  If user wants to generate boiler plate config for multiple stream use cases, he can do so by using the **-v or video_pipeline_instances** flag of builder. This flag creates multi stream boiler plate config for docker-compose.yml, eii_config.json & k8s k8s-service.yml files respectively.

  An example for running builder to generate multi instance boiler plate config for 3 streams of **video-streaming** use case has been provided below:

  .. code-block:: sh

     $ python3 builder.py -v 3 -f video-streaming.yml

  ..

     **NOTE**\ : This multi-instance feature support of Builder works only for the video pipeline i.e., **video-streaming.yml** use case alone and not with any other use case yml files like **video-streaming-storage.yml** etc., Also, it doesn't work for cases without ``-f`` switch too. In other words, only the above example works with ``-v`` taking in any +ve number


* 
  ``Running builder to generate benchmarking configs``\ :

  If user wants to provide a different set of docker-compose.yml, config.json & k8s k8s-service.yml other than the ones present in every service directory, he can opt to provide the **-d or override_directory** flag which indicates to search for these required set of files within a directory provided by the flag. For example, if user wants to pick up these files from a directory named **benchmarking**\ , he can run the command provided below:

  .. code-block:: sh

     $ python3 builder.py -d benchmarking

  ..

     **Note:**


     * If using the override directory feature of builder, it is recommended to include set of all 3 files mentioned above. Failing to provide any of the files in the override directory results in builder not including that service in the generated final config.
     * If user wishes to spawn a single Subscriber/Client container subscribing/receiving on multiple Publisher/Server containers, he can do so by adding the AppName of Subscriber/Client container in **subscriber_list** of `builder_config.json <https://verbose-umbrella-1e93cbeb.pages.github.io/IEdgeInsights/builder_config.json>`_ ensuring the Publisher/Server container **AppName** is added in the **publisher_list** of `builder_config.json <https://verbose-umbrella-1e93cbeb.pages.github.io/IEdgeInsights/builder_config.json>`_. For services not mentioned in **subscriber_list**\ , multiple containers specified by the **-v** flag are spawned.
       For eg: If builder is run with **-v 3** option and **Visualizer** isn't added in **subscriber_list** of `builder_config.json <https://verbose-umbrella-1e93cbeb.pages.github.io/IEdgeInsights/builder_config.json>`_\ , 3 **Visualizer** instances are spawned, each of them subscribing to 3 **VideoAnalytics** services. If **Visualizer** is added in **subscriber_list** of `builder_config.json <https://verbose-umbrella-1e93cbeb.pages.github.io/IEdgeInsights/builder_config.json>`_\ , a single **Visualizer** instance subscribing to 3 multiple **VideoAnalytics** is spawned.


Adding new EII service so it gets picked up by Builder
""""""""""""""""""""""""""""""""""""""""""""""""""""""

Since the builder takes care of registering and running any service present in it's own directory in the `IEdgeInsights <https://verbose-umbrella-1e93cbeb.pages.github.io/IEdgeInsights/WebVisualizer/eiidocs/temp/VideoAnalytics>`_ directory, this section describes on how to add any new service the user wants to add into the EII stack, subscribe to `VideoAnalytics <https://verbose-umbrella-1e93cbeb.pages.github.io/IEdgeInsights/WebVisualizer/eiidocs/temp/VideoAnalytics>`_ and publish on a new port.

Any service that needs to be added into the EII stack should be added as a new directory in the `IEdgeInsights <https://verbose-umbrella-1e93cbeb.pages.github.io/IEdgeInsights/eii_config.json>`_ directory. The directory should contain a **docker-compose.yml** which will be used to deploy the service as a docker container and it should also contain a **config.json** which contains the required config for the service to run once it is deployed. The **config.json** will mainly consist of a **config** section which includes the configuration related parameters required to run the application and an **interfaces** section which includes the configuration of how this service interacts with other services of the EII stack. The **AppName** present in **environment** section in **docker-compose.yml** file is appended to the **config** & **interfaces** like **/AppName/config** & **/AppName/interfaces** before being put into the main `eii_config.json <https://verbose-umbrella-1e93cbeb.pages.github.io/IEdgeInsights/eii_config.json>`_. Additionally, if the EII service needs to be deployed over k8s orchestrator, the **k8s-service.yml** file needs to be defined.

An example has been provided below on how to write the **config.json** for any new service, subscribe it to **VideoAnalytics** and publish on a new port:

.. code-block:: javascript

       {
           "config": {
               "paramOne": "Value",
               "paramTwo": [1, 2, 3],
               "paramThree": 4000,
               "paramFour": true
           },
           "interfaces": {
               "Subscribers": [
                   {
                       "Name": "default",
                       "Type": "zmq_tcp",
                       "EndPoint": "127.0.0.1:65013",
                       "PublisherAppName": "VideoAnalytics",
                       "Topics": [
                           "camera1_stream_results"
                       ]
                   }
               ],
               "Publishers": [
                   {
                       "Name": "default",
                       "Type": "zmq_tcp",
                       "EndPoint": "127.0.0.1:65113",
                       "Topics": [
                           "publish_stream"
                       ],
                       "AllowedClients": [
                           "ClientOne",
                           "ClientTwo",
                           "ClientThree"
                       ]
                   }
               ]
           }
       }

In the above specified **config.json**\ , the value of **config** key is the config required by the service to run and the value of the **interfaces** key is the config required by the service to 
interact with other services of EII stack over EII message bus.

The **Subscribers** value in the **interfaces** section denotes that this service should act as a subscriber to the stream being published by the value specified by **PublisherAppName** on the 
endpoint mentioned in value specified by **EndPoint** on topics specified in value of **Topics** key.

The **Publishers** value in the **interfaces** section denotes that this service publishes a stream of data after obtaining and processing it from **VideoAnalytics**. The stream is published on 
the endpoint mentioned in value of **EndPoint** key on topics mentioned in the value of **Topics** key. The services mentioned in the value of **AllowedClients** are the only clients able to 
subscribe to the published stream if being published securely over the EIIMessageBus.

Similar to above interface keys, EII services can also have "Servers" and "Clients" interface keys too. For example, check `config.json <https://verbose-umbrella-1e93cbeb.pages.github.io/IEdgeInsights/config.json>`_ of VideoIngestion service and `config.json <https://verbose-umbrella-1e93cbeb.pages.github.io/IEdgeInsights/config.json>`_ of SWTriggerUtility tool on how to use.

More details on the ``interfaces`` key responsible for the EII MessageBus endpoint configuration
can be found at `common/libs/ConfigMgr/README.html#interfaces <https://verbose-umbrella-1e93cbeb.pages.github.io/IEdgeInsights/README.html#interfaces>`_
