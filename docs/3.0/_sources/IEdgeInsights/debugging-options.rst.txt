
Debugging options
-----------------

Perform the following steps for debugging:


#. 
   Run the following command to check if all the OEI images are built successfully:

   .. code-block:: sh

       docker images|grep ia

#. 
   You can view all the dependency containers and the OEI containers that are up and running. Run the following command to check if all containers are running:

   .. code-block:: sh

       docker ps

#. 
   Ensure that the proxy settings are correctly configured and restart the docker service if the build fails due to no internet connectivity.

#. Run the ``docker ps`` command to list all the enabled containers that are included in the ``docker-compose.yml`` file.
#. From video ingestion>video analytics>visualizer, check if the default video pipeline with OEI is working fine.
#. The ``/opt/intel/eii`` root directory gets created - This is the installation path for OEI:

   * ``data/`` - stores the backup data for persistent imagestore and influxdb
   * ``sockets/`` - stores the IPC ZMQ socket files

The following table displays useful docker-compose and docker commands:

.. list-table::
   :header-rows: 1

   * - Command
     - Description
   * - ``docker-compose -f docker-compose-build.yml build``
     - Builds all the service containers
   * - ``docker-compose -f docker-compose-build.yml build [serv_cont_name]``
     - Builds a single service container
   * - ``docker-compose down``
     - Stops and removes the service containers
   * - ``docker-compose up -d``
     - Brings up the service containers by picking the changes done in the ``docker-compose.yml`` file
   * - ``docker ps``
     - Checks the running containers
   * - ``docker ps -a``
     - Checks the running and stopped containers
   * - ``docker stop $(docker ps -a -q)``
     - Stops all the containers
   * - ``docker rm $(docker ps -a -q)``
     - Removes all the containers. This is useful when you run into issue of already container is in use
   * - ``[docker compose cli]``
     - For more information refer to the `docker documentation <https://docs.docker.com/compose/reference/overview/>`_
   * - ``[docker compose reference]``
     - For more information refer to the `docker documentation <https://docs.docker.com/compose/compose-file/>`_
   * - ``[docker cli]``
     - For more information refer to the `docker documentation <https://docs.docker.com/engine/reference/commandline/cli/#configuration-files>`_
   * - ``docker-compose run --no-deps [service_cont_name]``
     - To run the docker images separately or one by one. For example: ``docker-compose run --name ia_video_ingestion --no-deps   ia_video_ingestion`` to run the VI container and the switch ``--no-deps`` will not bring up its dependencies mentioned in the ``docker-compose`` file. If the container does not launch, there could be some issue with the entrypoint program. You can override by providing the extra switch ``--entrypoint /bin/bash`` before the service container name in the ``docker-compose run`` command. This will let you access the container and run the actual entrypoint program from the container's terminal to root cause the issue. If the container is running and you want to access it then, run the command: ``docker-compose exec [service_cont_name] /bin/bash`` or ``docker exec -it [cont_name] /bin/bash``
   * - ``docker logs -f [cont_name]``
     - Use this command to check logs of containers
   * - ``docker-compose logs -f``
     - To see all the docker-compose service container logs at once

