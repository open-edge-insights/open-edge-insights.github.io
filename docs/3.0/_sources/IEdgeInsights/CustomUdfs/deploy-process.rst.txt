
Deploy Process
--------------

For deploying the Custom UDFs, complete the following steps:


#. Configure Visualizer and WebVisualizer services ``config.json`` to connect to one or more streams coming out of the following CustomUdf services. For more information, refer to the following:

   * `../Visualizer/README.md <https://github.com/open-edge-insights/video-native-visualizer/blob/master/README.md>`_
   * `../WebVisualizer/README.md <https://github.com/open-edge-insights/video-web-visualizer/blob/master/README.md>`_

#. 
   Enable the required CustomUDF services. As per the OEI default scenario, the sample custom UDF containers are not mandatory containers to run, hence the ``builder.py`` should run the ``video-streaming-all-udfs.yml`` use case. The following code snippet shows all the sample UDF containers:

   .. code-block:: yml

       AppName:
       - Visualizer
       - WebVisualizer
       - CustomUdfs/NativeSafetyGearAnalytics   <<<<< All lines from here added are customUDFs, User can define his own container directory here
       - CustomUdfs/NativeSafetyGearIngestion
       - CustomUdfs/PyMultiClassificationIngestion
       - CustomUdfs/PySafetyGearAnalytics
       - CustomUdfs/PySafetyGearIngestion
       - CustomUdfs/GVASafetyGearIngestion
       - CustomUdfs/NativeOneAPIIngestion

#. 
   Run the following commands:

   .. code-block:: bash

       cd [WORKDIR]/IEdgeInsights/build/
       python3 builder.py -f usecases/video-streaming-all-udfs.yml

   ..

      **Note:** It is not mandatory to keep the custom UDFs in the ``CustomUdfs`` directory, but you must change the ``video-streaming-all-udfs.yml`` file to point the right path. Additionally, if the   custom UDFs are placed under the ``IEdgeInsights`` directory then, the builder.py file automatically picks it to generate a consolidated ``IEdgeInsights/build/eii_config.json`` and ``IEdgeInsights/  build/docker-compose.yml`` files.


#. 
   After generating the consolidated **eii_config.json** and **docker-compose.yml** file, run the following commands to run the use case. As a precautionary measure, you can check the previously mentioned file to check the sanity of the UDF specific config and service details.

#. 
   Run the the following commands:

   .. code-block:: bash

       cd [WORKDIR]/IEdgeInsights/build/
       # Build base images (needed for buidling native custom udf services)
       docker-compose -f docker-compose-build.yml build ia_eiibase ia_common ia_video_common ia_openvino_base ia_configmgr_agent
       # Build custom udf services based on the use case selected
       docker-compose -f docker-compose-build.yml build ia_gva_safety_gear_ingestion ia_native_safety_gear_analytics ia_native_safety_gear_ingestion   ia_python_multi_classificationia_python_safety_gear_analytics ia_python_safety_gear_ingestion ia_native_oneapi_ingestion
       ./eii_start.sh
