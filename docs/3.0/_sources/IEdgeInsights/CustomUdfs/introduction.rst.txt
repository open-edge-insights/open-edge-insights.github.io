
Introduction
------------

This document describes the new approach of creating User Defined Functions (UDFs) or algorithms, and how to use UDFs inside the Open Edge Insights (OEI) framework. This document describes the workflow of a custom UDF. For more information on the coding aspects (callbacks) of the UDFs, refer to the `UDF Writing Guide <https://github.com/open-edge-insights/video-common/blob/master/udfs/HOWTO_GUIDE_FOR_WRITING_UDF.md>`_.

.. note::  In this document, you will find labels of 'Edge Insights for Industrial (EII)' for filenames, paths, code snippets, and so on. Consider the references of EII as OEI. This is due to the product name change of EII as OEI.


For information on the usage of the OpenVINO Inference Engine APIs, refer to the following:


* `OpenVINO-Documentation <https://docs.openvino.ai/2021.4/documentation.html>`_
* `OpenVINO-API-Reference <https://docs.openvino.ai/2021.4/api/api_reference.html>`_.

Select the suitable APIs depending on your requirement. For example, to start inference, select either the synchronous or the asynchronous method of the ``InferRequest`` class. The following sample video custom UDFs leverages the OpenVINO Inference Engine APIs:

..

   * `NativeSafetyGearAnalytics <https://github.com/open-edge-insights/video-custom-udfs/blob/master/NativeSafetyGearAnalytics>`_
   * `PySafetyGearAnalytics <https://github.com/open-edge-insights/video-custom-udfs/blob/master/PySafetyGearAnalytics>`_
   * `PyMultiClassificationIngestion <https://github.com/open-edge-insights/video-custom-udfs/blob/master/PyMultiClassificationIngestion>`_


Create UDFs in the `udfs-path <https://github.com/open-edge-insights/video-common/tree/master/udfs>`_ of the OEI build environment. This allows UDFs to be compiled in the VI (Video Ingestion) & the VA (Video Analytics) containers.

In addition to the approach mentioned earlier, you can build each UDF as an independent container, based out of the VI or the VA container image. This provides the following benefits:


* With an increased number of sample UDFs, VI and VA need not grow large because of the bloated Algo artifacts.
* Any update to the UDF's Algo or its logic will compile and build only the intended UDF specific code, instead of rebuilding every UDFs.
* Any change to base containers because of some unrelated changes in the Ubuntu packages triggers a complete container build again. This adds to the build time of a UDF.
* Every UDF can be versioned independently. The UDFs are represented by their own containers.
* A reduction in the size of the UDF container will reduce the network overhaul while transferring the images from REGISTRY to the target system.

As per this approach, a UDF or a chain of UDFs should be compiled and run as a separate OEI container. A video streaming pipeline contains two important componentsâ€”video ingestion and video analytics. In OEI, you add UDFs as a pre-processing, post-processing, or analytics algo. Hence, these UDF containers need to be inherited from the VI and VA container.
