
Video Pipeline Analytics
------------------------

This section provides more information about working with the video pipeline.

Enable Camera-based Video Ingestion
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

For detailed description on configuring different types of cameras and filter algorithms, refer to the `VideoIngestion/README.md <https://github.com/open-edge-insights/video-ingestion/blob/master/README.md>`_.

Use Video Accelerators in Ingestion and Analytics Containers
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Open EII supports running inference on ``CPU``\ , ``GPU``\ , ``MYRIAD (NCS2)``\ , and ``HDDL`` devices by accepting the ``device`` value ("CPU"|"GPU"|"MYRIAD"|"HDDL"),
part of the ``udf`` object configuration in the ``udfs`` key. The ``device`` field in the UDF config of ``udfs`` key in the ``VideoIngestion`` and ``VideoAnalytics``
configs can be updated at runtime via `EtcdUI <https://github.com/open-edge-insights/eii-etcd-ui>`_ interface, the ``VideoIngestion`` and ``VideoAnalytics``
services will auto-restart.
For more details on the UDF config, refer `common/udfs/README.md <https://github.com/open-edge-insights/video-common/blob/master/udfs/README.md>`_.

.. note:: 
   There is an initial delay of up to ~30 seconds while running inference on ``GPU`` (only for the first frame) as dynamically certain packages get created during runtime.


To Run on the USB Devices
~~~~~~~~~~~~~~~~~~~~~~~~~

For actual deployment if USB camera is required then mount the device node of the USB camera for ``ia_video_ingestion`` service. When multiple USB cameras are connected to host machine, the required camera should be identified with the device node and mounted.

For example, mount the two USB cameras connected to the host machine with device node as ``video0`` and ``video1``.

.. code-block:: yaml

     ia_video_ingestion:
       ...
       devices:
         - "/dev/dri"
         - "/dev/video0:/dev/video0"
         - "/dev/video1:/dev/video1"

.. note:: 
   ``/dev/dri`` is required for graphic drivers.


To Run on the MYRIAD Devices
~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. note:: 
   In the IPC mode, when publisher such as ia_video_ingestion, ia_video_analytics, or custom_udfs is running with the ``root`` user permissions then the subscribers such as ia_visualizer, ia_imagestore, or ia_influxdbconnector should also run as root.


At runtime, use the ``root`` user permissions to run inference on a ``MYRIAD`` device. To enable the root user at runtime in ``ia_video_ingestion``\ , ``ia_video_analytics``\ , or custom UDF services, add ``user: root`` in the respective ``docker-compose.yml`` file. Refer to the following example:

.. code-block:: yaml

     ia_video_ingestion:
       ...
       user: root

.. note:: 

   In the IPC mode when publisher (example, ia_video_ingestion, ia_video_analytics, or custom_udfs) is running with the ``root`` user permissions then the subscribers (For example ia_visualizer, ia_imagestore, ia_influxdbconnectorm, ia_video_profiler etc.) should also run as root by adding ``user: root`` in the respective docker-compose.yml file.
   To enable root user at runtime in ``ia_video_analytics`` or custom UDF services based on ``ia_video_analytics``\ , set ``user: root`` in the respective ``docker-compose.yml`` file. Refer the following example:


.. code-block:: yaml

       ia_video_analytics:
         ...
         user: root

Troubleshooting Issues for the MYRIAD (NCS2) Devices
""""""""""""""""""""""""""""""""""""""""""""""""""""

If the ``NC_ERROR`` occurs during device initialization of NCS2 stick then use the following workaround. Replug the device for the init, if the NCS2 devices fails to initialize during running Open EII. To check if initialization is successful, run **\ *dmesg*\ ** and **\ *lsusb*\ ** as follows:

.. code-block:: sh

   lsusb | grep "03e7" (03e7 is the VendorID and 2485 is one of the  productID for MyriadX)

.. code-block:: sh

         dmesg > dmesg.txt
         [ 3818.214919] usb 3-4: new high-speed USB device number 10 using xhci_hcd
         [ 3818.363542] usb 3-4: New USB device found, idVendor=03e7, idProduct=2485
         [ 3818.363546] usb 3-4: New USB device strings: Mfr=1, Product=2, SerialNumber=3
         [ 3818.363548] usb 3-4: Product: Movidius MyriadX
         [ 3818.363550] usb 3-4: Manufacturer: Movidius Ltd.
         [ 3818.363552] usb 3-4: SerialNumber: 03e72485
         [ 3829.153556] usb 3-4: USB disconnect, device number 10
         [ 3831.134804] usb 3-4: new high-speed USB device number 11 using xhci_hcd
         [ 3831.283430] usb 3-4: New USB device found, idVendor=03e7, idProduct=2485
         [ 3831.283433] usb 3-4: New USB device strings: Mfr=1, Product=2, SerialNumber=3
         [ 3831.283436] usb 3-4: Product: Movidius MyriadX
         [ 3831.283438] usb 3-4: Manufacturer: Movidius Ltd.
         [ 3831.283439] usb 3-4: SerialNumber: 03e72485
         [ 3906.460590] usb 3-4: USB disconnect, device number 11


* If you notice ``global mutex initialization failed`` during device initialization of NCS2 stick, then refer to the following link: https://www.intel.com/content/www/us/en/support/articles/000033390/boards-and-kits.html
* For VPU troubleshooting, refer the following link: https://docs.openvinotoolkit.org/2021.4/openvino_docs_install_guides_installing_openvino_linux_ivad_vpu.html#troubleshooting

To run on the HDDL Devices
~~~~~~~~~~~~~~~~~~~~~~~~~~

Complete the following steps to run inference on HDDL devices:


#. Download the full package for OpenVINO toolkit for Linux version "2021 4.2 LTS"
    (\ ``OPENVINO_IMAGE_VERSION`` used in `build/.env <https://github.com/open-edge-insights/eii-core/blob/master/build/.env>`_\ ) from the official website
    (https://software.intel.com/en-us/openvino-toolkit/choose-download/free-download-linux).
#. 
   Refer to the following link to install OpenVINO on the hostsystem


   * 
     OpenVINO install: https://docs.openvinotoolkit.org/2021.4/_docs_install_guides_installing_openvino_linux.html#install-openvino

     ..

        **Note:**
        OpenVINO 2021.4 installation creates a symbolic link to the latest installation with file name as ``openvino_2021`` instead of ``openvino``. You can create a symbolic link with file name as ``openvino`` to the latest installation as follows:

        .. code-block:: sh

            cd /opt/intel
            sudo ln -s <OpenVINO latest installation> openvino

        Example: sudo ln -s openvino_2021.4.752 openvino

        Uninstall the older versions of OpenVINO if it is installed on the host system.


#. 
   Refer to the following link to configure HDDL with ``root`` user rights


   * HDDL daemon setup: https://docs.openvinotoolkit.org/2021.4/_docs_install_guides_installing_openvino_linux_ivad_vpu.html

#. 
   After completing the HDDL setup, run the following commands with ``root`` user rights.

   .. code-block:: sh

           source /opt/intel/openvino/bin/setupvars.sh
           $HDDL_INSTALL_DIR/bin/hddldaemon

.. note:: 


   * HDDL Daemon should run in a different terminal or in the background on the host system where inference performed.
   * HDDL use cases were tested on host system with Ubuntu 20.04 kernel 5.13.0-27-generic by configuring and running HDDL daemon with ``root`` user rights.
   * HDDL plugin can have the ION driver compatibility issues with some versions of the Ubuntu kernel. If there are compatibility issues, then ION driver may not be installed and hddldaemon will use shared memory. To work with shared memory in docker environment, configure and run HDDL with ``root`` user rights.
   * To check the supported Ubuntu kernel versions, refer to the `OpenVINO-Release-Notes <https://www.intel.com/content/www/us/en/developer/articles/release-notes/openvino-relnotes.html>`_.
   * For actual deployment, mount only the required devices for services using OpenVINO with HDDL (\ ``ia_video_analytics`` or ``ia_video_ingestion``\ ) in ``docker-compose.yml`` file.
   * For example, mount only the Graphics and HDDL ion device for the ``ia_video_anaytics`` service. Refer to the following code snippet:


.. code-block:: sh

       ia_video_analytics:
         ...
         devices:
                 - "/dev/dri"
                 - "/dev/ion:/dev/ion"

Troubleshooting Issues for the HDDL Devices
"""""""""""""""""""""""""""""""""""""""""""


* Check if the HDDL Daemon is running on the host machine. This is to check if the HDDL Daemon is using the correct version of OpenVINO libraries in `build/.env <https://github.com/open-edge-insights/eii-core/blob/master/build/.env>`_. Enable the ``device_snapshot_mode`` to ``full`` in ``$HDDL_INSTALL_DIR/config/hddl_service.config`` on the host machine to get the complete snapshot of the HDDL device.
* For troubleshooting the VPU-related issues, refer to the following link:
  https://docs.openvinotoolkit.org/2021.4/openvino_docs_install_guides_installing_openvino_linux_ivad_vpu.html#troubleshooting
* For new features and changes from the previous versions, refer to the OpenVINO 2021.4 release notes from the following link:
  https://software.intel.com/content/www/us/en/develop/articles/openvino-relnotes.html
* For more details on the Known issues, limitations, and troubleshooting, refer to the OpenVINO website from the following link:
  https://docs.openvinotoolkit.org/2021.4/index.html

To Run on Intel(R) Processor Graphics (GPU/iGPU)
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

At runtime, use the ``root`` user permissions to run inference on a ``GPU`` device. To enable root user at runtime in ``ia_video_ingestion``\ , ``ia_video_analytics``\ , or custom UDF services, add ``user: root`` in the respective ``docker-compose.yml`` file. Refer the following example:

.. code-block:: yaml

     ia_video_ingestion:
       ...
       user: root

To enable root user at runtime in ``ia_video_analytics`` or any of the custom UDF services based on ``ia_video_analytics``\ , set ``user: root`` in the respective ``docker-compose.yml`` file.
For example, refer to the following:

.. code-block:: yaml

       ia_video_analytics:
         ...
         user: root

.. note:: 


   * In the IPC mode, when the publisher (example, ia_video_ingestion or ia_video_analytics) is running as root then the subscriber (For example ia_visualizer, ia_imagestore, ia_influxdbconnectorm, ia_video_profiler etc.) should also run as root by adding ``user: root`` in the respective docker-compose.yml file.
   * If you get a ``Failed to create plugin for device GPU/ clGetPlatformIDs error`` message, then check if the host system supports GPU device. Try installing the required drivers from `OpenVINO-steps-for-GPU <https://docs.openvinotoolkit.org/latest/openvino_docs_install_guides_installing_openvino_linux.html#additional-GPU-steps>`_. Certain platforms like TGL can have compatibility issues with the Ubuntu kernel version. Ensure the compatible kernel version is installed.

