
========
Security
========

The primary security objective of the OEI is to prevent time series and video data generated by the ingestion / analytic components from being accessed by unauthorized entities acting within the system or accessing it via the external network interfaces. 

Security is enabled in a two-stage process involving provisioning and execution on an edge compute node. The root user is considered a trusted entity; therefore, compromising the root password or giving Linux* sudoer permission to an untrusted user on the edge compute node will compromise security.

Provisioning
============

Provisioning must be done before deploying OEI on any node. Provisioning will start OEI ConfigMgr as a container and load it with the configuration required to run OEI for single or multi-node cluster setup.

The provisioning step of OEI includes:

#.	Loading the initial OEI ConfigMgr values from a json file.
#.	Generating OEI ConfigMgr user certificates for all applications.
#.	Generating required X509 certificates and putting them in OEI ConfigMgr.

Generating Keys and Certificates
--------------------------------

OEI is provided with a cert-tool that can create OEI ConfigMgr private keys and cert pair for all OEI containers. The cert-tool is a sample that’s uses OpenSSL commands to create the X.509 certs and private keys with names expected by the sample docker-compose.yml provided with the release. The user can opt to generate these certs using any tool and update the docker-compose.yml with the corresponding names for the final deployment.

The following certificates are generated by the cert-tool:

X.509 CA certificate, which is self-signed. This step can be omitted if the admin provides their own pre-generated CA certificate to the tool.

OEI ConfigMgr root user private key and certificate.

OEI ConfigMgr user private key and certificate for all the applications (provided in the configuration).

OEI ConfigMgr peer certificate to be generated for each node in the cluster.

The cert-tool will generate these keys and certificates and will keep them in a “Certificates/” directory with unique filenames for each certificate. This directory will be referred by the docker-compose.yml file for mounting these as secrets to the container.

Start Up and Run Time
======================

During Edge Compute Node reboot, the secrets stored in the OEI ConfigMgr need to be accessible to all of the OEI infrastructure containers. OEI ConfigMgr plays a crucial role in providing the secrets to other containers. 

Accessing Secrets
------------------

Docker-compose secret and OEI ConfigMgr are used to provide runtime secrets to OEI.

Application reads the OEI ConfigMgr certificates from the secrets of docker-compose.

Call the ConfigMgr library (OEI ConfigMgr client) for reading the application configurations (using the OEI user OEI ConfigMgr pub/pri key pair).

Read the message bus topics and message bus configurations for Pub / Sub and Request Response along with the ZMQ private keys.

For a publisher, the application needs the public keys of all subscribers. From the list of subscribers mentioned in the application OEI ConfigMgr configuration, the application needs to query the ConfigMgr and gets the public keys of all subscribers from OEI ConfigMgr. The application will pass this configuration to the OEI message bus.

For a subscriber, the ConfigMgr is used for getting the public key of the publisher and connecting to it.

Certificate Revocation
======================

Individual users can be deleted from the OEI ConfigMgr to revoke their certificates. In case of ZeroMQ* certificate revocation, the client’s public key can be removed from the allowed_clients option of the publisher.
